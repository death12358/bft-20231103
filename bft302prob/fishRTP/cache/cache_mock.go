// Code generated by MockGen. DO NOT EDIT.
// Source: cache/cache.goadimax2953/slotRTP

// Package cache is a generated GoMock package.
package cache

import (
	reflect "reflect"
	time "time"

	config "github.com/adimax2953/bftrtpmodel/bft302prob/fishRTP/config"
	times "github.com/adimax2953/bftrtpmodel/bft302prob/fishRTP/times"
	gomock "github.com/golang/mock/gomock"
)

// MockManagement is a mock of Management interface.
type MockManagement struct {
	ctrl     *gomock.Controller
	recorder *MockManagementMockRecorder
}

// MockManagementMockRecorder is the mock recorder for MockManagement.
type MockManagementMockRecorder struct {
	mock *MockManagement
}

// NewMockManagement creates a new mock instance.
func NewMockManagement(ctrl *gomock.Controller) *MockManagement {
	mock := &MockManagement{ctrl: ctrl}
	mock.recorder = &MockManagementMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManagement) EXPECT() *MockManagementMockRecorder {
	return m.recorder
}

// AddBetPay mocks base method.
func (m *MockManagement) AddBetPay(projectKey string, playerID int32, bet, pay int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBetPay", projectKey, playerID, bet, pay)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddBetPay indicates an expected call of AddBetPay.
func (mr *MockManagementMockRecorder) AddBetPay(projectKey, playerID, bet, pay interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBetPay", reflect.TypeOf((*MockManagement)(nil).AddBetPay), projectKey, playerID, bet, pay)
}

// GetGameRTPConfig mocks base method.
func (m *MockManagement) GetGameRTPConfig(gameCode  string) (*config.GameRTPConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGameRTPConfig", gameCode )
	ret0, _ := ret[0].(*config.GameRTPConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGameRTPConfig indicates an expected call of GetGameRTPConfig.
func (mr *MockManagementMockRecorder) GetGameRTPConfig(gameCode  interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGameRTPConfig", reflect.TypeOf((*MockManagement)(nil).GetGameRTPConfig), gameCode )
}

// GetPlayerRecord mocks base method.
func (m *MockManagement) GetPlayerRecord(projectKey string, playerID int32) (*config.PlayerRecordMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlayerRecord", projectKey, playerID)
	ret0, _ := ret[0].(*config.PlayerRecordMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlayerRecord indicates an expected call of GetPlayerRecord.
func (mr *MockManagementMockRecorder) GetPlayerRecord(projectKey, playerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlayerRecord", reflect.TypeOf((*MockManagement)(nil).GetPlayerRecord), projectKey, playerID)
}

// GetSysRecord mocks base method.
func (m *MockManagement) GetSysRecord(projectKey string) (*config.SysRecordMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSysRecord", projectKey)
	ret0, _ := ret[0].(*config.SysRecordMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSysRecord indicates an expected call of GetSysRecord.
func (mr *MockManagementMockRecorder) GetSysRecord(projectKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSysRecord", reflect.TypeOf((*MockManagement)(nil).GetSysRecord), projectKey)
}

// GetTime mocks base method.
func (m *MockManagement) GetTime(projectKey string) time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTime", projectKey)
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// GetTime indicates an expected call of GetTime.
func (mr *MockManagementMockRecorder) GetTime(projectKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTime", reflect.TypeOf((*MockManagement)(nil).GetTime), projectKey)
}

// InitDataByDaily mocks base method.
func (m *MockManagement) InitDataByDaily(projectKey string, tp times.TimeProvider) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitDataByDaily", projectKey, tp)
	ret0, _ := ret[0].(error)
	return ret0
}

// InitDataByDaily indicates an expected call of InitDataByDaily.
func (mr *MockManagementMockRecorder) InitDataByDaily(projectKey, tp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitDataByDaily", reflect.TypeOf((*MockManagement)(nil).InitDataByDaily), projectKey, tp)
}

// InitDataByMonthly mocks base method.
func (m *MockManagement) InitDataByMonthly(projectKey string, tp times.TimeProvider) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitDataByMonthly", projectKey, tp)
	ret0, _ := ret[0].(error)
	return ret0
}

// InitDataByMonthly indicates an expected call of InitDataByMonthly.
func (mr *MockManagementMockRecorder) InitDataByMonthly(projectKey, tp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitDataByMonthly", reflect.TypeOf((*MockManagement)(nil).InitDataByMonthly), projectKey, tp)
}

// ResetCycleData mocks base method.
func (m *MockManagement) ResetCycleData(projectKey string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetCycleData", projectKey)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetCycleData indicates an expected call of ResetCycleData.
func (mr *MockManagementMockRecorder) ResetCycleData(projectKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetCycleData", reflect.TypeOf((*MockManagement)(nil).ResetCycleData), projectKey)
}

// UpdateBonusMeta mocks base method.
func (m *MockManagement) UpdateBonusMeta(projectKey string, playerID, playerSpin, playerIntervalSpin, playerBufferSpin, monthlySysIntervalSpin int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBonusMeta", projectKey, playerID, playerSpin, playerIntervalSpin, playerBufferSpin, monthlySysIntervalSpin)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBonusMeta indicates an expected call of UpdateBonusMeta.
func (mr *MockManagementMockRecorder) UpdateBonusMeta(projectKey, playerID, playerSpin, playerIntervalSpin, playerBufferSpin, monthlySysIntervalSpin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBonusMeta", reflect.TypeOf((*MockManagement)(nil).UpdateBonusMeta), projectKey, playerID, playerSpin, playerIntervalSpin, playerBufferSpin, monthlySysIntervalSpin)
}

// UpdateHighScoreMeta mocks base method.
func (m *MockManagement) UpdateHighScoreMeta(projectKey string, playerID, playerSpin, playerIntervalSpin, playerBufferSpin, sysIntervalSpin int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateHighScoreMeta", projectKey, playerID, playerSpin, playerIntervalSpin, playerBufferSpin, sysIntervalSpin)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateHighScoreMeta indicates an expected call of UpdateHighScoreMeta.
func (mr *MockManagementMockRecorder) UpdateHighScoreMeta(projectKey, playerID, playerSpin, playerIntervalSpin, playerBufferSpin, sysIntervalSpin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHighScoreMeta", reflect.TypeOf((*MockManagement)(nil).UpdateHighScoreMeta), projectKey, playerID, playerSpin, playerIntervalSpin, playerBufferSpin, sysIntervalSpin)
}

// UpdateNewPlayerExperienceMeta mocks base method.
func (m *MockManagement) UpdateNewPlayerExperienceMeta(projectKey string, playerID, spin, intervalSpin, bufferSpin, count int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNewPlayerExperienceMeta", projectKey, playerID, spin, intervalSpin, bufferSpin, count)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNewPlayerExperienceMeta indicates an expected call of UpdateNewPlayerExperienceMeta.
func (mr *MockManagementMockRecorder) UpdateNewPlayerExperienceMeta(projectKey, playerID, spin, intervalSpin, bufferSpin, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNewPlayerExperienceMeta", reflect.TypeOf((*MockManagement)(nil).UpdateNewPlayerExperienceMeta), projectKey, playerID, spin, intervalSpin, bufferSpin, count)
}
